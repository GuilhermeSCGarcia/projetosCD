// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/02/2025 15:08:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          LAB1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LAB1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AAA;
reg BBB;
// wires                                               
wire a_c;
wire Qx;
wire Qy;
wire Qz;
wire Sa;

// assign statements (if any)                          
LAB1 i1 (
// port map - connection between master ports and signals/registers   
	.a_c(a_c),
	.AAA(AAA),
	.BBB(BBB),
	.Qx(Qx),
	.Qy(Qy),
	.Qz(Qz),
	.Sa(Sa)
);
initial 
begin 
#1000000 $finish;
end 

// AAA
initial
begin
	repeat(12)
	begin
		AAA = 1'b0;
		AAA = #40000 1'b1;
		# 40000;
	end
	AAA = 1'b0;
end 

// BBB
always
begin
	BBB = 1'b0;
	BBB = #10000 1'b1;
	#10000;
end 
endmodule

